import os
from telebot import TeleBot, types
import properties

user_data = {}


def get_prev_step(chat_id):
    current_index = properties.STEPS.index(user_data[chat_id]['current_step'])
    return properties.STEPS[max(0, current_index - 1)]


def send_filtered_properties(bot, chat_id, filtered_properties):
    if not filtered_properties:
        bot.send_message(chat_id, "–ù–∞ –∂–∞–ª—å, –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. ‚òπÔ∏è")
        return
    for property in filtered_properties:
        message = (f"–û–ø–∏—Å: {property['description']}\n"
                   f"–†–∞–π–æ–Ω: {property['district']}\n"
                   f"–ö—ñ–º–Ω–∞—Ç: {property['rooms']}\n"
                   f"–ü–ª–æ—â–∞: {property['area']}–º¬≤\n"
                   f"–ë—é–¥–∂–µ—Ç: ${property['budget']}\n"
                   f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä: {property['phone_number']}\n")
        bot.send_message(chat_id, message)

        media_group = []
        for photo in property['photos']:
            if os.path.exists(photo):
                media_group.append(types.InputMediaPhoto(open(photo, 'rb')))
            else:
                bot.send_message(chat_id, "[–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ]")

        if media_group:
            bot.send_media_group(chat_id, media=media_group)


def handle_choice(bot, chat_id, data, message_id):
    current_step = user_data[chat_id]['current_step']
    user_data[chat_id][current_step] = data.split('_')[1]

    next_step_index = properties.STEPS.index(current_step) + 1
    if next_step_index < len(properties.STEPS):
        next_step = properties.STEPS[next_step_index]
        user_data[chat_id]['current_step'] = next_step
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text=f"–í–∏–±—Ä–∞–Ω–æ {data.split('_')[1]}. –í–∞—à –Ω–∞—Å—Ç—É–ø–Ω–∏–π –≤–∏–±—ñ—Ä:",
                              reply_markup=get_keyboard(next_step))
    else:
        filtered_properties = properties.filter_properties(chat_id, user_data)
        send_filtered_properties(bot, chat_id, filtered_properties)


def handle_query(call, bot):
    chat_id = call.message.chat.id
    data = call.data
    if data == 'back':
        prev_step = get_prev_step(chat_id)
        user_data[chat_id]['current_step'] = prev_step
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text=f"–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ –∫—Ä–æ–∫: {prev_step}", reply_markup=get_keyboard(prev_step))
    else:
        handle_choice(bot, chat_id, data, call.message.message_id)


def handle_start(message, bot):
    chat_id = message.chat.id
    user_data[chat_id] = {'current_step': 'district'}
    welcome_message = ("–ü—Ä–∏–≤—ñ—Ç!üëã\n"
                       "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ —Ä—ñ–µ–ª—Ç–æ—Ä—Å—å–∫–æ–≥–æ –±–æ—Ç–∞!üè°\n"
                       "–ú–∏ —Ç—É—Ç, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –í–∞–º –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–µ –∂–∏—Ç–ª–æ –≤ —ñ–¥–µ–∞–ª—å–Ω–æ–º—É –º—ñ—Å—Ç—ñ.\n"
                       "–í —è–∫–æ–º—É —Ä–∞–π–æ–Ω—ñ –í–∏ –ø–ª–∞–Ω—É—î—Ç–µ –º–µ—à–∫–∞—Ç–∏?ü§î")
    bot.send_message(chat_id, welcome_message, reply_markup=create_district_keyboard())


def handle_test(message, bot):
    bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")


def create_district_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    districts = ["–°–∏—Ö—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω üå≥", "–ì–∞–ª–∏—Ü—å–∫–∏–π —Ä–∞–π–æ–Ω üè∞", "–ó–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π —Ä–∞–π–æ–Ω üöâ", "–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω üèûÔ∏è",
                 "–õ–∏—á–∞–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω üçÄ", "–®–µ–≤—á–µ–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞–π–æ–Ω üåÜ"]
    buttons = [types.InlineKeyboardButton(text=district, callback_data=f'district_{district}') for district in
               districts]
    keyboard.add(*buttons)
    return keyboard


def create_room_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    rooms = ["1-–∫—ñ–º–Ω–∞—Ç–Ω–∞", "2-–∫—ñ–º–Ω–∞—Ç–Ω–∞", "3-–∫—ñ–º–Ω–∞—Ç–Ω–∞", "4-–∫—ñ–º–Ω–∞—Ç–Ω–∞"]
    buttons = [types.InlineKeyboardButton(text=room, callback_data=f'room_{room}') for room in rooms]
    keyboard.add(*buttons)
    return keyboard


def create_area_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    areas = ["–¥–æ 30 –∫–≤.–º", "–¥–æ 40 –∫–≤.–º", "–¥–æ 50 –∫–≤.–º", "–¥–æ 70 –∫–≤.–º", "–¥–æ 90 –∫–≤.–º", "–¥–æ 110 –∫–≤.–º", "–¥–æ 130 –∫–≤.–º",
             "–¥–æ 150 –∫–≤.–º", "–¥–æ 170 –∫–≤.–º", "–¥–æ 190 –∫–≤.–º", "–≤—ñ–¥ 200 –∫–≤.–º"]
    buttons = [types.InlineKeyboardButton(text=area, callback_data=f'area_{area}') for area in areas]
    keyboard.add(*buttons)
    return keyboard


def create_budget_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    budgets = ["–¥–æ 400$", "–¥–æ 500$", "–¥–æ 600$", "–¥–æ 700$", "–¥–æ 800$", "–¥–æ 900$", "–¥–æ 1000$", "–¥–æ 1100$",
               "–¥–æ 1200$", "–¥–æ 1300$", "–¥–æ 1400$", "–≤—ñ–¥ 1400$"]
    buttons = [types.InlineKeyboardButton(text=budget, callback_data=f'budget_{budget}') for budget in budgets]
    keyboard.add(*buttons)
    return keyboard


def get_keyboard(step):
    keyboard = types.InlineKeyboardMarkup()
    if step != 'district':
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))

    if step == 'district':
        return create_district_keyboard()
    elif step == 'room':
        return create_room_keyboard()
    elif step == 'area':
        return create_area_keyboard()
    elif step == 'budget':
        return create_budget_keyboard()

    return keyboard

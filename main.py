import os
import telebot
from telebot import types
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import Property
from keyboards import create_district_keyboard, get_keyboard, \
    create_budget_keyboard  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ keyboards.py

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
DATABASE_URL = "sqlite:///properties.db"
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
TOKEN = "8104879861:AAEu8DGjBeocnwQ4xkyp48GOoC0kZshwf30"
bot = telebot.TeleBot(TOKEN)

user_data = {}
STEPS = ['district', 'room', 'area', 'budget']


# –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
def get_prev_step(chat_id):
    current_index = STEPS.index(user_data[chat_id]['current_step'])
    return STEPS[max(0, current_index - 1)]


def send_filtered_properties(chat_id, filtered_properties):
    if not filtered_properties:
        bot.send_message(chat_id, "–ù–∞ –∂–∞–ª—å, –∑–∞ –≤–∞—à–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. ‚òπÔ∏è")
        return

    for prop in filtered_properties:
        message = (f"–û–ø–∏—Å: {prop.description}\n"
                   f"–†–∞–π–æ–Ω: {prop.district}\n"
                   f"–ö—ñ–º–Ω–∞—Ç: {prop.rooms}\n"
                   f"–ü–ª–æ—â–∞: {prop.area} –∫–≤.–º\n"
                   f"–ë—é–¥–∂–µ—Ç: {prop.budget} –≥—Ä–Ω\n"
                   f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä: {prop.phone_number}\n")
        bot.send_message(chat_id, message)

        photos = prop.photos.split('|')
        media_group = []
        for photo in photos:
            if os.path.exists(photo):
                media_group.append(types.InputMediaPhoto(open(photo, 'rb')))
            else:
                bot.send_message(chat_id, "[–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ]")

        if media_group:
            bot.send_media_group(chat_id, media=media_group)


def apply_filters(query, filter_name, filter_value):
    if filter_name == 'district':
        district = filter_value.split(' ')[0]  # –ó–Ω—ñ–º–∞—î–º–æ –µ–º–æ–¥–∑—ñ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        return query.filter(Property.district == district)
    elif filter_name == 'room':
        rooms = int(filter_value.split('-')[0])
        return query.filter(Property.rooms == rooms)
    elif filter_name == 'area':
        if filter_value.isdigit():
            max_area = int(filter_value)
            return query.filter(Property.area <= max_area)
        elif '–≤—ñ–¥' in filter_value:
            min_area = int(filter_value.split(' ')[1])
            return query.filter(Property.area >= min_area)
    elif filter_name == 'budget':
        budget_value = int(filter_value.split(' ')[0])
        if '–≤—ñ–¥' in filter_value:
            return query.filter(Property.budget >= budget_value)
        else:
            return query.filter(Property.budget <= budget_value)
    return query


def filter_properties(session, user_data):
    query = session.query(Property)
    print(f"–§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –¥–∞–Ω–∏–º–∏: {user_data}")

    for key in ['district', 'room', 'area', 'budget']:
        if key in user_data:
            filter_value = user_data[key]
            query = apply_filters(query, key, filter_value)
            print(f"–î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ {key}: {filter_value}")
            print(f"–ü–æ—Ç–æ—á–Ω–∏–π SQL –∑–∞–ø–∏—Ç: {query}")

    filtered_properties = query.all()
    print(f"–ó–Ω–∞–π–¥–µ–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: {filtered_properties}")
    return filtered_properties


def handle_choice(chat_id, data, message_id):
    current_step = user_data[chat_id]['current_step']
    user_data[chat_id][current_step] = data.split('_')[1]

    next_step_index = STEPS.index(current_step) + 1
    if next_step_index < len(STEPS):
        next_step = STEPS[next_step_index]
        user_data[chat_id]['current_step'] = next_step
        next_message = {
            "district": "–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç, —è–∫–∞ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞.",
            "room": "–ß—É–¥–æ–≤–æ, —Ç–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –ø–ª–æ—â—É –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏—Ö –º–µ—Ç—Ä–∞—Ö.",
            "area": "–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –í–∞—à –±—é–¥–∂–µ—Ç."
        }
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"–í–∏–±—Ä–∞–Ω–æ {data.split('_')[1]}. {next_message[current_step]}",
            reply_markup=get_keyboard(next_step)
        )
    else:
        session = Session()
        filtered_properties = filter_properties(session, user_data[chat_id])
        send_filtered_properties(chat_id, filtered_properties)
        session.close()


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    chat_id = call.message.chat.id
    data = call.data

    if data == 'back':
        prev_step = get_prev_step(chat_id)
        user_data[chat_id]['current_step'] = prev_step
        bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                              text=f"–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ –∫—Ä–æ–∫: {prev_step}", reply_markup=get_keyboard(prev_step))
    else:
        handle_choice(chat_id, data, call.message.message_id)


@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {'current_step': 'district'}
    welcome_message = ("üëã –ü—Ä–∏–≤—ñ—Ç!"
                       " –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ —Ä—ñ–µ–ª—Ç–æ—Ä—Å—å–∫–æ–≥–æ –±–æ—Ç–∞!\n"
                       "–ú–∏ —Ç—É—Ç, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ –í–∞–º –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–µ –∂–∏—Ç–ª–æ –≤ —ñ–¥–µ–∞–ª—å–Ω–æ–º—É –º—ñ—Å—Ç—ñ.\n"
                       
                       "–í —è–∫–æ–º—É —Ä–∞–π–æ–Ω—ñ –í–∏ –ø–ª–∞–Ω—É—î—Ç–µ –≤–∏–Ω–∞–π–º–∞—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É? ü§î")
    bot.send_message(chat_id, welcome_message, reply_markup=create_district_keyboard())


@bot.message_handler(commands=['test'])
def handle_test(message):
    bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")


@bot.message_handler(func=lambda message: user_data.get(message.chat.id, {}).get('current_step') == 'area')
def handle_area(message):
    chat_id = message.chat.id
    area = message.text

    if not area.isdigit():
        bot.send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–ª–æ—â—ñ –∂–∏—Ç–ª–∞.")
        return

    user_data[chat_id]['area'] = area
    user_data[chat_id]['current_step'] = 'budget'
    bot.send_message(chat_id, "–ü–ª–æ—â–∞ –ø–æ–º–µ—à–∫–∞–Ω–Ω—è –≤–∫–∞–∑–∞–Ω–∞. –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –í–∞—à –±—é–¥–∂–µ—Ç.", reply_markup=create_budget_keyboard())


if __name__ == '__main__':
    bot.polling(none_stop=True)
